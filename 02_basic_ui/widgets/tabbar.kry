# TabBar Component
# Reusable tab bar component with Define syntax and custom properties

Define TabBar {
    Properties {
        position: String = "top"
    }
    
    Container {
        id: "tabbar_container"
        style: "tabbar_container_$position"
        
        Button {
            id: "tab_home"
            text: "Home"
            style: "tab_button"
            checked: true
        }
        
        Button {
            id: "tab_profile"
            text: "Profile"
            style: "tab_button"
        }
        
        Button {
            id: "tab_settings"
            text: "Settings"
            style: "tab_button"
        }
    }
}

# Base TabBar Container Style
style "tabbar_container_top" {
    background_color: "#2C2C2CFF"
    layout: row center
    border_width: 1
    border_color: "#444444FF"
    height: 50
}

style "tabbar_container_bottom" {
    background_color: "#2C2C2CFF"
    layout: row center
    border_width: 1
    border_color: "#444444FF"
    height: 50
}

style "tabbar_container_left" {
    background_color: "#2C2C2CFF"
    layout: column start
    border_width: 1
    border_color: "#444444FF"
    width: 150
}

style "tabbar_container_right" {
    background_color: "#2C2C2CFF"
    layout: column start
    border_width: 1
    border_color: "#444444FF"
    width: 150
}

# Base Tab Button Style
style "tab_button" {
    background_color: "#404040FF"
    text_color: "#CCCCCCFF"
    text_alignment: center
    border_width: 0
    layout: grow
    height: 50
    
    &:hover {
        background_color: "#505050FF"
    }
    
    &:checked {
        background_color: "#0066CCFF"
        text_color: "#FFFFFFFF"
    }
}

# Content area style for tab panels
style "tab_content" {
    background_color: "#1E1E1EFF"
    text_color: "#FFFFFFFF"
    layout: grow
    text_alignment: center
}

# TabBar widget script logic
@script "lua" {
    function tabbar_init()
        print("TabBar widget initialized")
    end
    
    function switch_tab(tab_id, content_ids)
        local tab_container = get_element(tab_id).parent
        for _, child in ipairs(tab_container.children) do
            if child.element_type == "Button" then
                child.checked = false
            end
        end
        get_element(tab_id).checked = true
        for _, content_id in ipairs(content_ids) do
            local content = get_element(content_id)
            if content then
                content.visible = false
            end
        end
        local content_id = tab_id:gsub("tab_", "") .. "_content"
        local content = get_element(content_id)
        if content then
            content.visible = true
        end
    end
    
    function setup_tab_handlers(tab_ids, content_ids)
        for _, tab_id in ipairs(tab_ids) do
            local tab = get_element(tab_id)
            if tab then
                tab.onclick = function()
                    switch_tab(tab_id, content_ids)
                end
            end
        end
    end
    
    tabbar_init()
}