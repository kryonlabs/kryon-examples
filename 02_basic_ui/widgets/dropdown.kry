# Dropdown Component (Simplified Syntax)
# Reusable, encapsulated, and stateful.

Define Dropdown {
    # Public properties (can be passed from parent)
    options = ["Option 1", "Option 2", "Option 3"]
    selectedIndex = -1  # -1 means no selection
    placeholder = "Select an option"
    width = 200
    onSelect = null     # Callback to notify parent of selection change
    
    # Private properties (prefixed with underscore)
    _isOpen = false
    _currentText = "Select an option"

    # The component's template
    Container {
        id: "container"
        style: "dropdown_container"
        width: $width

        Button {
            id: "button"
            text: $_currentText
            style: "dropdown_button"
            width: $width
            onClick: "dropdown_toggle"
        }

        Container {
            id: "menu"
            style: "dropdown_menu"
            width: $width
            visible: $_isOpen

            @for option, index in $options
                Button {
                    key: $index
                    text: $option
                    style: "dropdown_option"
                    onClick: "dropdown_handleSelect"
                }
            @end
        }
    }

    # Component methods - @method, @func, and @function are aliases
    @method "lua" dropdown_toggle() {
        print("üîç [DROPDOWN_DEBUG] dropdown_toggle called")
        local menu = getElementById("menu")
        if menu then
            print("üîç [DROPDOWN_DEBUG] Found menu element")
            local isVisible = menu:getVisible()
            print("üîç [DROPDOWN_DEBUG] Current visibility:", isVisible)
            menu:setVisible(not isVisible)
            print("üîç [DROPDOWN_DEBUG] Set visibility to:", not isVisible)
        else
            print("‚ùå [DROPDOWN_DEBUG] Menu element not found!")
        end
    }

    @func "lua" dropdown_handleSelect() {
        print("üîç [DROPDOWN_DEBUG] dropdown_handleSelect called")
        
        -- For now, just hide the menu and set a test text
        local button = getElementById("button")
        if button then
            button:setText("Selected Option")
            print("üîç [DROPDOWN_DEBUG] Set button text to 'Selected Option'")
        else
            print("‚ùå [DROPDOWN_DEBUG] Button element not found!")
        end
        
        local menu = getElementById("menu")
        if menu then
            menu:setVisible(false)
            print("üîç [DROPDOWN_DEBUG] Hidden menu")
        else
            print("‚ùå [DROPDOWN_DEBUG] Menu element not found!")
        end
    }
}

# Dropdown styles
style "dropdown_container" {
    display: flex
    flex_direction: column
    position: relative
}

style "dropdown_button" {
    background_color: "#FFFFFFFF"
    text_color: "#495057FF"
    border_width: 2
    border_color: "#DEE2E6FF"
    border_radius: 8
    padding: 12
    text_alignment: center
    font_size: 16
    height: 48
    font_weight: 500
    
    &:hover {
        background_color: "#F8F9FAFF"
        border_color: "#0D6EFDFF"
        text_color: "#0D6EFDFF"
    }
    
    &:active {
        background_color: "#E9ECEFFF"
        border_color: "#0A58CAFF"
    }
}

style "dropdown_menu" {
    background_color: "#FFFFFFFF"
    border_width: 3
    border_color: "#000000FF"
    border_radius: 8
    position: absolute
    pos_x: 0
    pos_y: 50
    z_index: 1000
    max_height: 150
    height: 150
    display: flex
    flex_direction: column
    padding: 8
    box_shadow: "0 4px 6px rgba(0, 0, 0, 0.3)"
    overflow: visible
}

style "dropdown_option" {
    background_color: "#F8F9FAFF"
    text_color: "#495057FF"
    padding: 12
    text_alignment: center
    font_size: 15
    border_width: 1
    border_color: "#DEE2E6FF"
    height: 40
    font_weight: 400
    margin: 2
    
    &:hover {
        background_color: "#E9ECEFFF"
        text_color: "#0D6EFDFF"
    }
    
    &:active {
        background_color: "#DEE2E6FF"
    }
}

style "dropdown_option_selected" {
    background_color: "#0D6EFDFF"
    text_color: "#FFFFFFFF"
    padding: 12
    text_alignment: center
    font_size: 15
    border_width: 0
    height: 40
    font_weight: 500
    
    &:hover {
        background_color: "#0B5ED7FF"
    }
}

